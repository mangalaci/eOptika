ALTER TABLE pickup_dates ADD INDEX `hivszam` (`hivszam`) USING BTREE;


DROP TABLE IF EXISTS SM_EVENT;
CREATE TABLE SM_EVENT
SELECT 	DISTINCT 
		u.origin,
		u.erp_invoice_id,
		u.num_of_items,
		u.created,
		u.due_date,
		u.related_division,
		u.billing_country_standardized,
		r.billing_zip_code,
		r.billing_city,
		p.shipping_country_standardized,
		p.pickup_zip_code AS shipping_zip_code,
		p.pickup_city AS shipping_city,
		u.related_webshop,
		u.payment_method,
		u.shipping_method,
		u.revenues_wdisc_in_base_currency,
		u.gross_margin_wdisc_in_base_currency,
		u.`gross_margin_wdisc_%`,
		u.invoice_yearmonth,
		u.invoice_month,
		u.invoice_year,
		u.order_year,
		u.order_month,
		u.order_day_in_month,
		u.net_margin_wdisc_in_base_currency,
		u.`net_margin_wdisc_%`,
		u.trx_marketing_channel,
		u.trx_rank,
		u.num_of_purch,
		u.contact_lens_trx,
		u.solution_trx,
		u.eye_drops_trx,
		u.sunglass_trx,
		u.vitamin_trx,
		b.item_id,
		b.reference_id,
		b.fulfillment_date,
		b.item_quantity,
		b.CT1_SKU,
		b.CT1_SKU_name,
		b.CT2_pack,
		b.CT3_product,
		b.CT3_product_short,
		b.CT4_product_brand,
		b.CT5_manufacturer,
		b.product_group,
		b.lens_type,
		b.is_color,
		b.wear_duration,
		b.wear_days,
		b.item_type,
		b.lens_bc,
		b.lens_pwr,
		b.lens_cyl,
		b.lens_ax,
		b.lens_dia,
		b.lens_add,
		b.lens_clr,
		b.pack_size AS package_size,
		b.package_unit AS package_type,
		CASE 	WHEN d.atvdat IS NOT NULL THEN DATE_ADD(d.atvdat,INTERVAL b.wear_days + 12 DAY)
				ELSE  IF(t.courier_status_key = 13, DATE_ADD(t.courier_date,INTERVAL b.wear_days + 12 DAY),IF(t.courier_status_key = 18,DATE_ADD(t.courier_date,INTERVAL b.wear_days + 12 DAY),'9999-12-31'))
		END AS reminder_date,
		NULL AS reminder_created_date,
		NULL AS reminder_basket_URL,
		NULL AS reminder_sent,
		t.state_status AS tracking_status,
		DATE(t.courier_date) AS tracking_status_date,
		TIME(t.courier_date) AS tracking_status_time,
		t.courier_date,
		t.partner_courier_name,
		t.courier_track_id,
		t.partner_courier_tracking_url,
		t.webshop_name,
		NULL AS order_time,
		NULL AS dispatched,
		NULL AS tracking_closed,
		NULL AS segmentation_1,
		NULL AS segmentation_2,
		NULL AS segmentation_3,
		NULL AS segmentation_4,
		NULL AS segmentation_5,
		NULL AS segmentation_6,
		NULL AS segmentation_7,
		NULL AS segmentation_8,
		NULL AS segmentation_9,
		NULL AS segmentation_10,
		NULL AS NPS_score,
		NULL AS NPS_survey_sent,
		NULL AS NPS_answer_received,
		NULL AS language_of_communication,
		NULL AS preferred_communication_channel,
		NULL AS location_eye_check,
		NULL AS date_eye_check,
		NULL AS time_eye_check,
		NULL AS date_created,
		NULL AS optometrist_eye_check,
		NULL AS fee_eye_check,
		NULL AS location_store_visit,
		NULL AS date_store_visit,
		NULL AS time_store_visit,
		NULL AS date_created2,
		NULL AS contact_person_store_visit,
		NULL AS adwords_campaign_id,
		NULL AS adwords_ad_group,
		NULL AS adwords_sitelink_id,
		NULL AS product_type_to_return,
		NULL AS return_shipment_method,
		NULL AS return_reason,
		NULL AS date_return_sent,
		NULL AS date_return_record_created,
		NULL AS product_received,
		NULL AS return_follow_up_triggered,
		NULL AS date_refund_record_created,
		NULL AS refund_method,
		NULL AS refund_amount,
		NULL AS refund_currency,
		NULL AS refund_notes,
		NULL AS refund_completed,
		NULL AS refund_follow_up_triggered,
		NULL AS newsletter_permission,
		NULL AS newsletter_type,
		NULL AS date_start_newsletter,
		NULL AS date_end_newsletter
FROM BASE_08_TABLE b
LEFT JOIN
(
SELECT 	origin,
		erp_invoice_id,
		reference_id,
		COUNT(item_id) AS num_of_items,
		user_id,
		created,
		due_date,
		billing_country_standardized,
		billing_zip_code,
		billing_city,
		shipping_country_standardized,
		shipping_zip_code,
		shipping_city,
		item_is_canceled,
		last_modified_date,
		last_modified_by,
		related_warehouse,
		payment_method,
		shipping_method,
		related_division,
		currency,
		exchange_rate_of_currency,
		item_vat_rate,
		ROUND(SUM(item_net_purchase_price_in_base_currency*item_quantity),0) AS item_net_purchase_price_in_base_currency,
		ROUND(SUM(item_net_sale_price_in_currency*item_quantity),0) AS item_net_sale_price_in_currency,
		ROUND(SUM(item_gross_sale_price_in_currency*item_quantity),0) AS item_gross_sale_price_in_currency,
		ROUND(SUM(item_net_sale_price_in_base_currency*item_quantity),0) AS item_net_sale_price_in_base_currency,
		ROUND(SUM(item_gross_sale_price_in_base_currency*item_quantity),0) AS item_gross_sale_price_in_base_currency,
		SUM(item_quantity) AS item_quantity,
		ROUND(SUM(item_revenue_in_local_currency),0) AS item_revenue_in_local_currency,
		ROUND(SUM(item_vat_value_in_local_currency),0) AS item_vat_value_in_local_currency,
		ROUND(SUM(item_revenue_in_base_currency),0) AS item_revenue_in_base_currency,
		ROUND(SUM(item_vat_in_base_currency),0) AS item_vat_in_base_currency,
		ROUND(SUM(item_gross_revenue_in_base_currency),0) AS item_gross_revenue_in_base_currency,
		ROUND(SUM(item_weight_in_kg),3) AS item_weight_in_kg,
		user_type,
		province,
		city_size,
		gender,
		full_name,
		salutation,
		reminder_day_dt,
		reminder_day_flg,
		ROUND(SUM(revenues_wdisc_in_local_currency),0) AS revenues_wdisc_in_local_currency,
		ROUND(SUM(revenues_wdisc_in_base_currency),0) AS revenues_wdisc_in_base_currency,
		ROUND(SUM(gross_margin_wodisc_in_base_currency),0) AS gross_margin_wodisc_in_base_currency,
		ROUND(SUM(gross_margin_wdisc_in_base_currency),0) AS gross_margin_wdisc_in_base_currency,
		ROUND(SUM(gross_margin_wodisc_in_base_currency)/SUM(item_revenue_in_base_currency),2) AS `gross_margin_wodisc_%`,
		ROUND(SUM(gross_margin_wdisc_in_base_currency)/SUM(revenues_wdisc_in_base_currency),2) AS `gross_margin_wdisc_%`,
		newsletter,
		cohort_id,
		CASE WHEN origin = 'invoices' THEN invoice_yearmonth ELSE NULL END AS invoice_yearmonth,
		CASE WHEN origin = 'invoices' THEN invoice_year ELSE NULL END AS invoice_year,
		CASE WHEN origin = 'invoices' THEN invoice_month ELSE NULL END AS invoice_month,
		CASE WHEN origin = 'invoices' THEN invoice_day_in_month ELSE NULL END AS invoice_day_in_month,
		CASE WHEN origin = 'invoices' THEN invoice_hour ELSE NULL END AS invoice_hour,
		cohort_month_since,
		user_cum_transactions,
		user_cum_gross_revenue_in_base_currency,
		NULL AS order_date_and_time,
		CASE WHEN origin = 'orders' THEN order_year ELSE NULL END AS order_year,
		CASE WHEN origin = 'orders' THEN order_month ELSE NULL END AS order_month,
		CASE WHEN origin = 'orders' THEN order_day_in_month ELSE NULL END AS order_day_in_month,
		CASE WHEN origin = 'orders' THEN order_weekday ELSE NULL END AS order_weekday,
		CASE WHEN origin = 'orders' THEN order_week_in_month ELSE NULL END AS order_week_in_month,
		packaging_deadline,
		related_webshop,
		trx_marketing_channel,
		num_of_purch,
		trx_rank,
		SUM(item_revenue_in_base_currency) AS order_value,
		ROUND(SUM(net_margin_wodisc_in_base_currency),0) AS net_margin_wodisc_in_base_currency,
		ROUND(SUM(net_margin_wdisc_in_base_currency),0) AS net_margin_wdisc_in_base_currency,
		ROUND(SUM(net_margin_wodisc_in_base_currency)/SUM(item_revenue_in_base_currency),2) AS `net_margin_wodisc_%`,
		ROUND(SUM(net_margin_wdisc_in_base_currency)/SUM(revenues_wdisc_in_base_currency),2) AS `net_margin_wdisc_%`,
		ROUND(SUM(shipping_cost_in_base_currency),0) AS shipping_cost_in_base_currency,
		ROUND(SUM(packaging_cost_in_base_currency),0) AS packaging_cost_in_base_currency,
		ROUND(SUM(payment_cost_in_base_currency),0) AS payment_cost_in_base_currency,
		MAX(CASE WHEN product_group  = 'Contact lenses' THEN 1 ELSE 0 END) AS contact_lens_trx,
		MAX(CASE WHEN product_group  = 'Contact lens cleaners' THEN 1 ELSE 0 END) AS solution_trx,
		MAX(CASE WHEN product_group  = 'Eye drops' THEN 1 ELSE 0 END) AS eye_drops_trx,
		MAX(CASE WHEN product_group  = 'Sunglasses' THEN 1 ELSE 0 END) AS sunglass_trx,
		MAX(CASE WHEN product_group  = 'Vitamins' THEN 1 ELSE 0 END) AS vitamin_trx
FROM (SELECT * FROM BASE_08_TABLE ORDER BY created DESC) r
GROUP BY erp_invoice_id
) u
ON b.erp_invoice_id = u.erp_invoice_id
LEFT JOIN AGGR_USER_REAL_ADDRESS r
ON u.user_id = r.user_id
LEFT JOIN AGGR_USER_PICKUP_ADDRESS p
ON u.user_id = p.user_id
LEFT JOIN sm_tracking_data t
ON b.erp_invoice_id = t.reference_id
LEFT JOIN pickup_dates d
ON b.reference_id = d.hivszam

;


ALTER TABLE `SM_EVENT` ADD `id` INT UNSIGNED NOT NULL AUTO_INCREMENT FIRST, ADD PRIMARY KEY (`id`);